name: build_docker

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE: ghcr.io/openmethane/openmethane

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform:
          #          - linux/arm64
          - linux/amd64

    permissions:
      contents: read
      packages: write

    outputs:
      digest: ${{ steps.build.outputs.digest }}

    # Builds and pushes the image
    # Tags the image with the PR that it is linked to
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: "${{ env.IMAGE }}"
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
      - name: Build and push image
        uses: docker/build-push-action@v5
        id: build
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          push: true
          pull: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
  test-unit:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: read
    env:
      IMAGE_ID: ghcr.io/openmethane/openmethane@${{ needs.build.outputs.digest }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull built docker image
        run: |
          docker pull ${{ env.IMAGE_ID }}
      - name: Run pytest
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/opt/openmethane/ \
            -e TARGET=docker \
            ${{ env.IMAGE_ID }} \
            python -m pytest -r a -v tests/unit

  test-integration:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: read
    env:
      IMAGE_ID: ghcr.io/openmethane/openmethane@${{ needs.build.outputs.digest }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull built docker image
        run: |
          docker pull ${{ env.IMAGE_ID }}
          # Ensure that the data directory exists and is writable
          mkdir data
      - name: Cache CAMS data
        id: cache-cams
        uses: actions/cache@v4
        with:
          path: data/inputs
          key: cams
      - name: Download CAMS input data
        if: steps.cache-cams.outputs.cache-hit != 'true'
        run: |
          # This can take a few minutes as the CAMS data is stored on tape
          docker run --rm \
            -v ${{ github.workspace }}:/opt/project \
            -e CDSAPI_KEY=${{ secrets.CDSAPI_ADS_KEY }} \
            ${{ env.IMAGE_ID }} \
            python scripts/cmaq_preprocess/download_cams_input.py \
            -s 2022-07-22 \
            -e 2022-07-22 \
            data/cams/cams_eac4_methane.nc
      - name: Run pytest
        run: |
          make fetch-domains
          docker run --rm \
            -v ${{ github.workspace }}:/opt/project/ \
            -e TARGET=docker-test \
            -e CDSAPI_KEY=$CDSAPI_KEY \
            -e CDSAPI_URL=$CDSAPI_URL \
            -e EARTHDATA_USERNAME=$EARTHDATA_USERNAME \
            -e EARTHDATA_PASSWORD=$EARTHDATA_PASSWORD \
            ${{ env.IMAGE_ID }} \
            python -m pytest -r a -v tests/integration/cmaq_preprocess tests/integration/sat_data
        env:
          CDSAPI_KEY: ${{ secrets.CDSAPI_ADS_KEY }}
          CDSAPI_URL: https://ads.atmosphere.copernicus.eu/api/v2
          EARTHDATA_USERNAME: ${{ secrets.EARTHDATA_USERNAME }}
          EARTHDATA_PASSWORD: ${{ secrets.EARTHDATA_PASSWORD }}

  test-e2e:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: read
    container:
      image: ghcr.io/openmethane/openmethane@${{ needs.build.outputs.digest }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    steps:
      - name: Run e2e test
        run: |
          cd /opt/project
          make fetch-domains
          bash scripts/run-all.sh
        env:
          CDSAPI_KEY: ${{ secrets.CDSAPI_ADS_KEY }}
          CDSAPI_URL: https://ads.atmosphere.copernicus.eu/api/v2
          EARTHDATA_USERNAME: ${{ secrets.EARTHDATA_USERNAME }}
          EARTHDATA_PASSWORD: ${{ secrets.EARTHDATA_PASSWORD }}
          # Uses the local checked-in WRF and prior data
          CMAQ_PREPROCESS_CONFIG_FILE: config/cmaq_preprocess/config.docker.test.json
          PRIOR_PATH: "/opt/project/tests/test-data/prior/out-om-domain-info.nc"
      - name: Upload CMAQ artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts
          path: /opt/project/data

  # Tag the latest image if running on the main branch
  # TODO: Handle tagged builds
  tag-latest-image:
    runs-on: ubuntu-latest
    needs: [ test-integration , test-unit, test-e2e ]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: "${{ env.IMAGE }}"
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main'}}
      - name: Push latest image
        uses: docker/build-push-action@v5
        id: build
        with:
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          load: true

  # Push the image to ECR as well
  push-ecr:
    runs-on: ubuntu-latest
    needs: [ test-integration , test-unit, build ]
    permissions:
      contents: read
      packages: read
    env:
      GHCR_IMAGE_ID: ghcr.io/openmethane/openmethane@${{ needs.build.outputs.digest }}
      ECR_IMAGE: 654654509571.dkr.ecr.ap-southeast-2.amazonaws.com/github/openmethane/openmethane
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        # TODO: Use the OIDC token instead of the access key
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Pull built docker image
        run: |
          docker pull ${{ env.GHCR_IMAGE_ID }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: "${{ env.ECR_IMAGE }}"
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main'}}
      - name: Tag and push docker image to Amazon ECR
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          echo $TAGS
          
          IFS=$'\n'
          for tag in $TAGS; do
            echo "Tagging ${{ env.GHCR_IMAGE_ID }} as $tag"
            docker tag "${{ env.GHCR_IMAGE_ID }}" "$tag"
            docker push "$tag"
          done