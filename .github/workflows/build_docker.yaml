name: build_docker

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE: ghcr.io/openmethane/openmethane

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform:
          #          - linux/arm64
          - linux/amd64

    permissions:
      contents: read
      packages: write

    outputs:
      imageid: ${{ steps.build.outputs.imageid }}
      digest: ${{ steps.build.outputs.digest }}

    # Builds and pushes the image
    # Tags the image with the PR that it is linked to
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: "${{ env.IMAGE }}"
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
      - name: Build and push image
        uses: docker/build-push-action@v5
        id: build
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          push: true
          pull: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
  test-unit:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: read
    env:
      IMAGE_ID: ghcr.io/openmethane/openmethane@${{ needs.build.outputs.digest }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull built docker image
        run: |
          docker pull ${{ env.IMAGE_ID }}
      - name: Run pytests
        run: |
          poetry run python -m pytest -r a -v tests/unit
        env:
          CDSAPI_KEY: ${{ secrets.CDSAPI_ADS_KEY }}
          CDSAPI_URL: https://ads.atmosphere.copernicus.eu/api/v2
          EARTHDATA_USERNAME: ${{ secrets.EARTHDATA_USERNAME }}
          EARTHDATA_PASSWORD: ${{ secrets.EARTHDATA_PASSWORD }}
#  test-integration:
#    runs-on: ubuntu-latest
#    needs: build
#    permissions:
#      contents: read
#      packages: read
#    env:
#      IMAGE_ID: ghcr.io/openmethane/setup-wrf@${{ needs.build.outputs.digest }}
#    steps:
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#      - name: Checkout code
#        uses: actions/checkout@v4
#      - name: Login to Container registry
#        uses: docker/login-action@v3
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      - name: Pull built docker image
#        run: |
#          docker pull ${{ env.IMAGE_ID }}
#      - name: Cache Geog data
#        id: cache-geog
#        uses: actions/cache@v4
#        with:
#          path: data/geog
#          key: geog-data-${{ hashFiles('scripts/download-geog.sh') }}
#      - name: Download and extract geography data
#        if: steps.cache-geog.outputs.cache-hit != 'true'
#        run: |
#          ./scripts/download-geog.sh --low-res
#      - name: Cache CAMS data
#        id: cache-cams
#        uses: actions/cache@v4
#        with:
#          path: data/inputs
#          key: cams
#      - name: Download CAMS input data
#        if: steps.cache-cams.outputs.cache-hit != 'true'
#        run: |
#          # This can take a few minutes as the CAMS data is stored on tape
#          docker run --rm \
#            -v ${{ github.workspace }}:/opt/project \
#            -e CDSAPI_KEY=${{ secrets.CDSAPI_ADS_KEY }} \
#            ${{ env.IMAGE_ID }} \
#            python scripts/download_cams_input.py \
#            -s 2022-07-01 \
#            -e 2022-07-01 \
#            data/inputs/cams_eac4_methane.nc
#      - name: Run test
#        run: |
#          # Update the namelist.wps file to use the low resolution data
#          sed -i "s/geog_data_res.*/geog_data_res = 'usgs_10m+lowres',/g" templates/aust-test/namelist.wps
#          # Run setup_for_wrf.py
#          docker run --rm \
#            -v ${{ github.workspace }}:/opt/project \
#            ${{ env.IMAGE_ID }} \
#            python scripts/setup_for_wrf.py -c config/wrf/config.docker.json
#          # Run WRF
#          docker run --rm \
#            -v ${{ github.workspace }}:/opt/project \
#            ${{ env.IMAGE_ID }} \
#            data/runs/aust-test/main.sh
#          # Prepare CMAQ
#          docker run --rm \
#            -v ${{ github.workspace }}:/opt/project \
#            ${{ env.IMAGE_ID }} \
#            python scripts/setup_for_cmaq.py
#      - name: Run pytest integration tests
#        run: |
#          # Run the integration tests which rely on WRF output already being available
#          docker run --rm \
#            -v ${{ github.workspace }}:/opt/project \
#            ${{ env.IMAGE_ID }} \
#            python -m pytest -v tests/integration
#      # The WRF directory contains filenames with : in them, which are not supported by upload-artifact
#      - name: Zip WRF artifacts
#        if: ${{ always() }}
#        run: |
#          tar -cvzf results.tar.gz --exclude data/geog data
#      - name: Upload WRF artifacts
#        if: ${{ always() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: results
#          path: ${{ github.workspace }}/results.tar.gz
#
#  # Tag the latest image if running on the main branch
#  # TODO: Handle tagged builds
#  tag-latest-image:
#    runs-on: ubuntu-latest
#    needs: [ test-integration , test-unit ]
#    if: github.ref == 'refs/heads/main'
#    permissions:
#      contents: read
#      packages: write
#    steps:
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#      - name: Checkout code
#        uses: actions/checkout@v4
#      - name: Login to Container registry
#        uses: docker/login-action@v3
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      - name: Extract metadata (tags, labels) for Docker
#        id: meta
#        uses: docker/metadata-action@v5
#        with:
#          images: "${{ env.IMAGE }}"
#          tags: |
#            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main'}}
#      - name: Push latest image
#        uses: docker/build-push-action@v5
#        id: build
#        with:
#          labels: ${{ steps.meta.outputs.labels }}
#          tags: ${{ steps.meta.outputs.tags }}
#          cache-from: type=gha
#          cache-to: type=gha,mode=max
#          push: true
#          load: true