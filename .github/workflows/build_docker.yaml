name: Build docker image

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE: openmethane/openmethane

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform:
          #          - linux/arm64
          - linux/amd64

    permissions:
      contents: read
      packages: write

    outputs:
      digest: ${{ steps.build.outputs.digest }}
      registry-image-id: ${{ steps.remote-image-id.outputs.REMOTE_ID }}

    # Builds and pushes the image
    # Tags the image with the PR that it is linked to
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: "${{ env.REGISTRY }}/${{ env.IMAGE }}"
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
      - name: Build and push image
        uses: docker/build-push-action@v5
        id: build
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          push: true
          pull: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Construct remote image id
        id: remote-image-id
        run: |
          echo "REMOTE_ID=${{ env.REGISTRY }}/${{ env.IMAGE }}@${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

  test-unit:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: read
    container:
      image: ${{ needs.build.outputs.registry-image-id }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    steps:
      - name: Run pytest
        run: |
          cd /opt/project
          python -m pytest -r a -v tests/unit
        env:
          TARGET: docker-test

  test-integration:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: read
    container:
      image: ${{ needs.build.outputs.registry-image-id }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
      volumes:
        - /opt/project/data
    steps:
      - name: Cache CAMS data
        id: cache-cams
        uses: actions/cache@v4
        with:
          path: data/inputs
          key: cams
      - name: Download CAMS input data
        if: steps.cache-cams.outputs.cache-hit != 'true'
        env:
          CDSAPI_KEY: ${{ secrets.CDSAPI_ADS_KEY }}
          CDSAPI_URL: https://ads.atmosphere.copernicus.eu/api
        run: |
          cd /opt/project
          # This can take a few minutes as the CAMS data is stored on tape
          python scripts/cmaq_preprocess/download_cams_input.py \
            -s 2022-07-22 \
            -e 2022-07-22 \
            data/cams/cams_eac4_methane_2022-07-22-2022-07-22.nc
      - name: Run pytest
        env:
          CDSAPI_KEY: ${{ secrets.CDSAPI_ADS_KEY }}
          CDSAPI_URL: https://ads.atmosphere.copernicus.eu/api
          EARTHDATA_USERNAME: ${{ secrets.EARTHDATA_USERNAME }}
          EARTHDATA_PASSWORD: ${{ secrets.EARTHDATA_PASSWORD }}
          TARGET: docker-test
        run: |
          cd /opt/project
          make fetch-domains
          env
          python -m pytest -r a -v tests/integration/cmaq_preprocess tests/integration/obs_preprocess

  test-e2e:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: read
    container:
      image: ${{ needs.build.outputs.registry-image-id }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    steps:
      - name: Run e2e test
        env:
          CDSAPI_KEY: ${{ secrets.CDSAPI_ADS_KEY }}
          CDSAPI_URL: https://ads.atmosphere.copernicus.eu/api
          EARTHDATA_USERNAME: ${{ secrets.EARTHDATA_USERNAME }}
          EARTHDATA_PASSWORD: ${{ secrets.EARTHDATA_PASSWORD }}
          # Uses the local checked-in WRF and prior data
          TARGET: docker-test
          NUM_PROC_COLS: 1
          NUM_PROC_ROWS: 2
        run: |
          cd /opt/project
          make fetch-domains
          bash scripts/run-all.sh
      - name: Run fourdvar integration tests
        run: |
          cd /opt/project
          # This test requires the results from the preprocessing step
          # Verbosity is set to A to show all test results
          python -m pytest -r A -v tests/integration/fourdvar

      - name: Upload CMAQ artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts
          path: /opt/project/data
          retention-days: 5

  # Determine additional tags to apply to the image
  image-tags:
    runs-on: ubuntu-latest
    needs: [ test-integration , test-unit, test-e2e ]
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # check if the triggering ref is a vX.Y.Z tag and NOT vX.Y.Za0 (prerelease)
      - name: Check for stable release
        id: check-stable
        if: startsWith(github.event.ref, 'refs/tags/v')
        run: |
          if [[ "${{ github.event.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "STABLE_RELEASE=true" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: "${{ env.REGISTRY }}/${{ env.IMAGE }}"
          tags: |
            type=ref,event=pr
            type=pep440,pattern={{version}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || startsWith(github.event.ref, 'refs/tags/v') }}
            type=raw,value=stable,enable=${{ steps.check-stable.outputs.STABLE_RELEASE == 'true' }}

  tag-image-ghcr:
    runs-on: ubuntu-latest
    needs: [ build, image-tags ]
    if: ${{ needs.image-tags.outputs.tags }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Login to Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull built docker image
        run: |
          docker pull ${{ needs.build.outputs.registry-image-id }}
      - name: Tag and push docker image
        run: |
          TAGS="${{ needs.image-tags.outputs.tags }}"
          
          IFS=$'\n'
          for tag in $TAGS; do
            echo "Tagging ${{ needs.build.outputs.registry-image-id }} as $tag"
            docker tag "${{ needs.build.outputs.registry-image-id }}" "$tag"
            docker push "$tag"
          done

  # Push the image to ECR as well
  push-ecr:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        account_id:
          - "654654509571"
          - "058264429703"
        include:
          - account_id: "654654509571"
            aws_access_key_secret: "AWS_ACCESS_KEY_ID_SANDBOX"
            aws_secret_access_key_secret: "AWS_SECRET_ACCESS_KEY_SANDBOX"
          - account_id: "058264429703"
            aws_access_key_secret: "AWS_ACCESS_KEY_ID_PROD"
            aws_secret_access_key_secret: "AWS_SECRET_ACCESS_KEY_PROD"

    needs: [ build, image-tags ]
    if: ${{ needs.image-tags.outputs.tags }}
    permissions:
      contents: read
      packages: read
    env:
      ECR_REGISTRY: ${{ matrix.account_id }}.dkr.ecr.ap-southeast-2.amazonaws.com
    steps:
      - name: Login to Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        # TODO: Use the OIDC token instead of the access key
        with:
          aws-access-key-id: ${{ secrets[matrix.aws_access_key_secret] }}
          aws-secret-access-key: ${{ secrets[matrix.aws_secret_access_key_secret] }}
          aws-region: ap-southeast-2
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull built docker image
        run: |
          docker pull "${{ needs.build.outputs.registry-image-id }}"
      - name: Tag and push docker image to Amazon ECR
        # Replace the ghcr.io portion of the tags with the ECR URL so the tags
        # are pushed to the right registry
        run: |
          TAGS="${{ needs.image-tags.outputs.tags }}"
          
          IFS=$'\n'
          for tag in $TAGS; do
            ECR_TAG=${tag/"${{ env.REGISTRY }}"/"${{ env.ECR_REGISTRY }}"}
            echo "Tagging ${{ needs.build.outputs.registry-image-id }} as $ECR_TAG"
            docker tag "${{ needs.build.outputs.registry-image-id }}" "$ECR_TAG"
            docker push "$ECR_TAG"
          done
